package app.config;


import app.controllers.ExceptionController;
import app.exceptions.ApiException;
import app.exceptions.Message;
import app.routes.Routes;
import io.javalin.Javalin;
import io.javalin.config.JavalinConfig;
import jakarta.persistence.EntityManagerFactory;
import lombok.NoArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

// Uses Lombok to create a private no-argument constructor.
// This means no one can create an instance of this class. It's used statically.
@NoArgsConstructor(access = lombok.AccessLevel.PRIVATE)
public class ApplicationConfig {
    // Holds our API routes globally so they can be accessed throughout the configuration.
    private static Routes routes;

    // Logger for printing errors or information to the console or log file.
    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationConfig.class);

    // Controller to handle exceptions across the entire application.
    private static final ExceptionController exceptionController = new ExceptionController();

    public static void configuration(JavalinConfig config) {
        // base path for all routes
        config.router.contextPath = "/api/v1";
        // Turns off the Javalin banner in the console when the server starts.
        config.showJavalinBanner = false;
        // Sets JSON as the default response content type.
        config.http.defaultContentType = "application/json";

        // adding the securityRoutes to javalin routes


        // Adds all our routes to Javalin's router.
        config.router.apiBuilder(routes.getRoutes());

        // Plugins
        // Adds a "route overview" page at /routes showing all endpoints.
        config.bundledPlugins.enableRouteOverview("/routes"); // enables route overview at /routes
    }

    public static String getProperty(String propName) throws IOException
    {
        try (InputStream is = HibernateConfig.class.getClassLoader().getResourceAsStream("properties-from-pom.properties"))
        {
            // Loads a properties file (usually generated by Maven) as an input stream.

            // Reads all properties from the file into a Properties object.
            Properties prop = new Properties();
            prop.load(is);

            // Returns the value of the requested property name.
            return prop.getProperty(propName);
        } catch (IOException ex) {
            ex.printStackTrace();
            // Throws an exception if the file cannot be found or read.
            throw new IOException("Could not read property from pom file. Build Maven!");
        }
    }

    public static Javalin startServer(int port, EntityManagerFactory emf) {
        // Initializes our routes with an EntityManagerFactory for database access.
        routes = new Routes(emf);

        // Creates a Javalin server and applies the configuration method defined above.
        var app = Javalin.create(ApplicationConfig::configuration);

        // Handles JSON errors (e.g., malformed requests)
        app.exception(IllegalStateException.class, (e, ctx) -> {
            ctx.status(400); // Bad Request
            ctx.json(new Message(400, "Invalid JSON: " + e.getMessage()));
        });

        // Handles custom API exceptions
        app.exception(ApiException.class, exceptionController::apiExceptionHandler);

        // Handles all other general exceptions
        app.exception(Exception.class, exceptionController::exceptionHandler);

        // Starts the server on the specified port.
        app.start(port);

        // Returns the app object so we can stop the server later if needed.
        return app;
    }

    // stops the server
    public static void stopServer(Javalin app) {
        app.stop();
    }
}

